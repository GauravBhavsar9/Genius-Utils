{"version":3,"sources":["components/Form.js","components/Navbar.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","_useState","useState","_useState2","Object","slicedToArray","text","setText","react_default","a","createElement","Fragment","style","color","mode","className","heading","backgroundColor","id","rows","value","onChange","event","target","placeholder","onClick","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","length","Navbar","concat","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","toggleMode","role","htmlFor","Alert","e","alert","charAt","slice","message","data-bs-dismiss","App","darkMode","setDarkMode","_useState3","_useState4","setAlert","msg","setTimeout","document","body","components_Alert","components_Form","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.3ccc17f9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    // console.log(\"UpperCase Keypress\");\r\n    props.showAlert(\"Converted To UpperCase\",\"success\")\r\n\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted To LowerCase\",\"success\")\r\n\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared\",\"success\")\r\n\r\n  };\r\n\r\n  const handleCopyClick = ()=>{\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Text Is Copied\",\"success\")\r\n  }\r\n\r\n  const handleRemoveExtraSpacesClick = ()=>{\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\"Extra Spaces Removed !!!!!\",\"success\")\r\n\r\n\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n    // console.log(\"Text Updation Happened\");\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n        <div className=\"mb-3\">\r\n          <h3 className=\"form-label\">{props.heading}</h3>\r\n          <textarea\r\n            className=\"form-control\"\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"rgb(65 73 74)\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            placeholder=\"Enter Text Here\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convert To UpperCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>\r\n          Convert To LowerCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopyClick}>\r\n          Copy\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleRemoveExtraSpacesClick}>\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <h3\r\n        className=\"container my-2\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        Your Text Summary\r\n      </h3>\r\n      <p\r\n        className=\"container my-1\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        You Have Entered {text.split(\" \").length} Words And {text.length}{\" \"}\r\n        Characters\r\n      </p>\r\n      <p\r\n        className=\"container my-1\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        You Can Read It In {0.008 * text.split(\" \").length}\r\n      </p>\r\n      <h3\r\n        className=\"container my-2\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        Preview\r\n      </h3>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        {text.length > 0\r\n          ? text\r\n          : \"Please Enter Something In TextBox To See The Preview\"}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${\r\n        props.mode === \"light\" ? \"light\" : \"dark\"\r\n      } bg-${props.mode === \"light\" ? \"light\" : \"dark\"}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"form-check form-switch\" onChange={props.toggleMode}>\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            role=\"switch\"\r\n            id=\"flexSwitchCheckDefault\"\r\n          />\r\n          {/* Changes Made To Create Dark */}\r\n          <label\r\n            className=\"form-check-label\"\r\n            htmlFor=\"flexSwitchCheckDefault\"\r\n            style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n          >\r\n            Enable DarkMode\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n\r\n    const titleCase = (e)=>{\r\n        \r\n        return e.charAt(0).toUpperCase()+e.slice(1).toLowerCase();\r\n    }\r\n\r\n  return (\r\n    //   If Alert Is Null Then Alert Containt Will Not Be Printed\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{titleCase(props.alert.type)}</strong> : {props.alert.message}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n     </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport Navbar from \"./components/Navbar\";\n// import About from \"./components/About\";\nimport Alert from \"./components/Alert\";\n\n// To Use React-router-dom i have to import this\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleMode = () => {\n    if (darkMode === \"light\") {\n      setDarkMode(\"dark\");\n      document.body.style.backgroundColor = \"rgb(65 73 74)\";\n      showAlert(\"DarkMode Activated !!!!!!\", \"success\");\n    } else {\n      setDarkMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"LightMode Activated !!!!!!\", \"success\");\n    }\n  };\n\n  const showAlert = (msg, type) => {\n    setAlert({ message: msg, type: type });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  return (\n    <>\n      <Navbar title=\"Genius-Utils\" mode={darkMode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        {/*Container Is BootStrap Class Which Aligns Everything In Centre*/}\n        <Form heading=\"Text Analyzer\" mode={darkMode} showAlert={showAlert} />\n       \n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}